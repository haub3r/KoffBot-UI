{"version":3,"sources":["koff.png","Queries.tsx","Statistics.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["endpointUrl","GetOnce","callback","useState","enabled","setEnabled","useQuery","isLoading","data","refetch","useEffect","QueryGetStats","a","console","log","axios","get","res","useStyles","makeStyles","mainContainer","minHeight","padding","paddingBottom","backgroundColor","props","isOnDarkMode","color","textAlign","borderRadius","transition","rowButton","margin","marginTop","mainHeader","fontFamily","fontSize","marginBottom","subHeader","fontWeight","number","Statistics","classes","query","Container","className","src","logo","alt","title","width","ToastCount","CircularProgress","FridayCount","DrunkCount","Box","Button","variant","onClick","theme","topButton","position","right","koffContainer","App","setIsOnDarkMode","darkModeText","setDarkModeText","koffString","setKoffString","toggleDarkMode","Mousetrap","bind","queryClient","QueryClient","QueryClientProvider","client","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c85f7de4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/koff.adf36e99.png\";","import axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { QueryFunction, QueryObserverResult, useQuery } from \"react-query\";\r\n\r\nexport interface StatsDto {\r\n  ToastCount: number;\r\n  FridayCount: number;\r\n  DrunkCount: number;\r\n}\r\n\r\nexport interface StatsQueryResults {\r\n  data: StatsDto | undefined;\r\n  refetch: () => Promise<QueryObserverResult>;\r\n}\r\n\r\nconst endpointUrl = \"https://koffbot.azurewebsites.net/api/koffbotstats\";\r\n\r\nconst QueryGetStats = (): StatsQueryResults => {\r\n  const getStats = async () => {\r\n    console.log(\"Fetching fresh data from server...\");\r\n    const res = await axios.get(endpointUrl);\r\n    console.log(\"Response from \" + endpointUrl + \":\", res);\r\n\r\n    return res.data;\r\n  };\r\n\r\n  const data = GetOnce(getStats);\r\n\r\n  return data;\r\n};\r\n\r\nconst GetOnce = (callback: QueryFunction<StatsDto>): StatsQueryResults => {\r\n  const [enabled, setEnabled] = useState(true);\r\n\r\n  const { isLoading, data, refetch } = useQuery(\"statistics\", callback, {\r\n    enabled: enabled,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Check whether data exists.\r\n    if (!isLoading && !!data) {\r\n      setEnabled(false);\r\n    }\r\n  }, [data, isLoading]);\r\n\r\n  const results = { data: data, refetch: refetch };\r\n  return results;\r\n};\r\n\r\nexport default QueryGetStats;\r\n","import {\r\n  Box,\r\n  Button,\r\n  CircularProgress,\r\n  Container,\r\n  makeStyles,\r\n  Theme,\r\n} from \"@material-ui/core\";\r\nimport logo from \"./koff.png\";\r\nimport QueryGetStats, { StatsQueryResults } from \"./Queries\";\r\n\r\ninterface Props {\r\n  isOnDarkMode: boolean;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, Props>(() => ({\r\n  mainContainer: {\r\n    minHeight: \"20em\",\r\n    padding: \"1em\",\r\n    paddingBottom: \"25em\",\r\n    backgroundColor: (props) => (props.isOnDarkMode ? \"black\" : \"white\"),\r\n    color: (props) => (props.isOnDarkMode ? \"white\" : \"black\"),\r\n    textAlign: \"center\",\r\n    borderRadius: \"5px\",\r\n    transition: \"0.8s\",\r\n  },\r\n  rowButton: {\r\n    margin: \"0.2em\",\r\n    marginTop: \"8em\",\r\n  },\r\n  mainHeader: {\r\n    fontFamily: \"Rockwell\",\r\n    fontSize: \"3.3em\",\r\n    textAlign: \"center\",\r\n    marginBottom: \"0.6em\",\r\n  },\r\n  subHeader: {\r\n    fontSize: \"1.2em\",\r\n    fontWeight: \"bold\",\r\n    marginTop: \"1.5em\",\r\n  },\r\n  number: {\r\n    fontSize: \"1.5em\",\r\n    fontWeight: \"bold\",\r\n    // marginTop: \"0.5em\",\r\n  },\r\n}));\r\n\r\nconst Statistics = (props: Props) => {\r\n  const classes = useStyles(props);\r\n\r\n  const query = QueryGetStats() as StatsQueryResults;\r\n  const data = query.data;\r\n  const refetch = query.refetch;\r\n\r\n  const refresh = () => {\r\n    refetch();\r\n  };\r\n\r\n  return (\r\n    <Container className={classes.mainContainer}>\r\n      <div className={classes.mainHeader}>KoffBot Portal üçª</div>\r\n      <img src={logo} alt=\"Koff!\" title=\"Koff!\" width=\"100px\" />\r\n      {/* <div style={{ fontSize: \"1.5em\", marginBottom: \"1em\" }}>üç∫</div> */}\r\n      <h2>Statistics:</h2>\r\n      <div className={classes.subHeader}>Times toasted:</div>\r\n      <div className={classes.number}>\r\n        {!data ? <CircularProgress /> : data.ToastCount}\r\n      </div>\r\n      <div className={classes.subHeader}>Fridays hailed:</div>\r\n      <div className={classes.number}>\r\n        {!data ? <CircularProgress /> : data.FridayCount}\r\n      </div>\r\n      <div className={classes.subHeader}>Moments drunk:</div>\r\n      <div className={classes.number}>\r\n        {!data ? <CircularProgress /> : data.DrunkCount}\r\n      </div>\r\n      <Box>\r\n        <Button\r\n          className={classes.rowButton}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={refresh}\r\n        >\r\n          Refresh\r\n        </Button>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n","import { Button, makeStyles } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport Statistics from \"./Statistics\";\r\nimport Mousetrap from \"mousetrap\";\r\nimport { QueryClient, QueryClientProvider } from \"react-query\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  topButton: {\r\n    position: \"absolute\",\r\n    right: \"2em\",\r\n  },\r\n  koffContainer: {\r\n    marginBottom: \"1em\",\r\n  },\r\n}));\r\n\r\nconst App = () => {\r\n  const classes = useStyles();\r\n  const [isOnDarkMode, setIsOnDarkMode] = useState(false);\r\n  const [darkModeText, setDarkModeText] = useState(\"Dark Mode\");\r\n  const [koffString, setKoffString] = useState(\"\");\r\n  const toggleDarkMode = () => {\r\n    setIsOnDarkMode(!isOnDarkMode);\r\n    setDarkModeText(isOnDarkMode ? \"Dark Mode\" : \"Light Mode\");\r\n  };\r\n  Mousetrap.bind(\"d\", toggleDarkMode);\r\n  Mousetrap.bind(\"k\", () => {\r\n    setKoffString(koffString + \" üç∫ \");\r\n  });\r\n\r\n  const queryClient = new QueryClient();\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <div className={classes.koffContainer}>{koffString}</div>\r\n      <Button\r\n        className={classes.topButton}\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        onClick={toggleDarkMode}\r\n      >\r\n        {darkModeText}\r\n      </Button>\r\n      <Statistics isOnDarkMode={isOnDarkMode}></Statistics>\r\n    </QueryClientProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}